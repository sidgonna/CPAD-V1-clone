import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:minddrop/controllers/ideas_controller.dart';
import 'package:minddrop/models/idea.dart';
import 'package:minddrop/models/random_style.dart';
import 'package:minddrop/widgets/visual_selection_widget.dart';
// No Uuid needed here as we are editing an existing idea.

class EditIdeaScreen extends StatefulWidget {
  final String ideaId;

  const EditIdeaScreen({super.key, required this.ideaId});

  @override
  State<EditIdeaScreen> createState() => _EditIdeaScreenState();
}

class _EditIdeaScreenState extends State<EditIdeaScreen> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _titleController;
  late TextEditingController _contentController;
  bool _isLoading = false;
  bool _isDataInitialized = false;

  VisualType _selectedVisualType = VisualType.none;
  String? _visualValue; // image path or RandomStyle ID
  RandomStyle? _currentRandomStyle; // Store the actual RandomStyle object if it's being edited or newly generated

  Idea? _originalIdea;

  @override
  void initState() {
    super.initState();
    _titleController = TextEditingController();
    _contentController = TextEditingController();
    _loadIdeaData();
  }

  Future<void> _loadIdeaData() async {
    final ideasController = Provider.of<IdeasController>(context, listen: false);
    // Find the idea. The DatabaseService.getIdea() already populates randomStyle if ID exists.
    // For robustness, IdeasController should have a getIdeaById method.
    // For now, we try to find it in the list or fetch directly (simplified).
    Idea? ideaToEdit;
    try {
      ideaToEdit = ideasController.ideas.firstWhere((i) => i.id == widget.ideaId);
    } catch (e) {
      // Not in list, try fetching from DB (controller should ideally handle this)
      // This is a simplified direct fetch for demonstration.
      // ideaToEdit = ideasController.getIdeaFromDb(widget.ideaId); // Imaginary method
    }

    if (ideaToEdit == null) {
      // Handle idea not found - maybe pop and show error
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Error: Idea not found.'), backgroundColor: Colors.red),
        );
        Navigator.of(context).pop();
      }
      return;
    }

    _originalIdea = ideaToEdit;
    _titleController.text = _originalIdea!.title;
    _contentController.text = _originalIdea!.content;

    if (_originalIdea!.imagePath != null) {
      _selectedVisualType = VisualType.image;
      _visualValue = _originalIdea!.imagePath;
    } else if (_originalIdea!.randomStyleId != null && _originalIdea!.randomStyle != null) {
      _selectedVisualType = VisualType.randomStyle;
      _visualValue = _originalIdea!.randomStyleId;
      _currentRandomStyle = _originalIdea!.randomStyle; // Important for VisualSelectionWidget's initial state
    }

    setState(() {
      _isDataInitialized = true;
    });
  }

  Future<void> _submitForm() async {
    if (!_formKey.currentState!.validate()) {
      return; // Form is not valid
    }

    if (_selectedVisualType == VisualType.none || _visualValue == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Mandatory: Please select an Image or a Random Style.'),
          backgroundColor: Colors.redAccent,
        ),
      );
      return; // Stop submission if no visual element is selected
    }

    setState(() {
      _isLoading = true;
    });

    final ideasController = Provider.of<IdeasController>(context, listen: false);

    // Update the original idea object
    _originalIdea!.title = _titleController.text;
    _originalIdea!.content = _contentController.text;
    _originalIdea!.updatedAt = DateTime.now(); // Update timestamp

    // Handle visual changes
    // If a new random style was generated by VisualSelectionWidget, it's in _currentRandomStyle
    // and its ID is in _visualValue
    RandomStyle? styleToSave;

    if (_selectedVisualType == VisualType.image) {
      _originalIdea!.imagePath = _visualValue;
      _originalIdea!.randomStyleId = null;
      _originalIdea!.randomStyle = null;
      // TODO: Delete old RandomStyle if it's no longer used by any other idea (P2-CRUD-002 / P2-IMG-002)
      // TODO: Delete old image if a new image is picked or switched to style (P2-IMG-002)
    } else if (_selectedVisualType == VisualType.randomStyle) {
      _originalIdea!.randomStyleId = _visualValue; // This is the ID of the style
      _originalIdea!.imagePath = null;
      // If _currentRandomStyle.id matches _visualValue, it means this style (new or existing) is selected.
      // If _currentRandomStyle is new (i.e., its ID wasn't _originalIdea.randomStyleId initially), it needs to be saved.
      // If an existing style was re-selected, _currentRandomStyle would be that existing one.
      // If a *new* style was generated, _currentRandomStyle holds it.
      if (_currentRandomStyle != null && _currentRandomStyle!.id == _visualValue) {
         // Check if this style object is actually new or different from original
        bool isNewOrChangedStyle = _originalIdea!.randomStyle == null || _originalIdea!.randomStyle!.id != _currentRandomStyle!.id;
        if(isNewOrChangedStyle) {
            styleToSave = _currentRandomStyle; // This new/selected style needs to be persisted
            _originalIdea!.randomStyle = _currentRandomStyle; // Assign to the idea
        }
        // If it's an existing style that was just re-confirmed, no need to re-save it unless it changed.
        // VisualSelectionWidget doesn't currently support *editing* a random style, only generating a new one or re-selecting.
      }
      // TODO: Delete old image if switched from image to style (P2-IMG-002)
    }

    try {
      await ideasController.updateIdea(_originalIdea!, newRandomStyleToSave: styleToSave);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('${_originalIdea!.title} updated successfully!'),
            backgroundColor: Colors.green,
          ),
        );
        Navigator.of(context).pop(); // Pop back to detail or home
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error updating idea: $e'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _titleController.dispose();
    _contentController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (!_isDataInitialized) {
      return Scaffold(
        appBar: AppBar(title: const Text('Edit Idea')),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Edit Idea'),
        actions: [
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.only(right: 20.0),
              child: Center(child: CircularProgressIndicator(color: Colors.white)),
            )
          else
            IconButton(
              icon: const Icon(Icons.save),
              onPressed: _submitForm,
              tooltip: 'Save Changes',
            ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: <Widget>[
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Title',
                  hintText: 'Enter the title of your idea',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
                textInputAction: TextInputAction.next,
              ),
              const SizedBox(height: 16.0),
              TextFormField(
                controller: _contentController,
                decoration: const InputDecoration(
                  labelText: 'Content',
                  hintText: 'Describe your idea...',
                  border: OutlineInputBorder(),
                  alignLabelWithHint: true,
                ),
                maxLines: 5,
                keyboardType: TextInputType.multiline,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter the content of your idea';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 24.0),
              VisualSelectionWidget(
                // Key helps Flutter to re-create the widget state if initial values change significantly.
                // However, VisualSelectionWidget's own initState handles initial values.
                key: ValueKey(_originalIdea?.imagePath ?? _originalIdea?.randomStyleId ?? 'initial'),
                initialVisualType: _selectedVisualType,
                initialVisualValue: _visualValue, // This is image path or RandomStyle ID
                initialRandomStyle: (_selectedVisualType == VisualType.randomStyle) ? _currentRandomStyle : null,
                onSelectionChanged: (type, value, randomStyle) { // randomStyle is the full object if newly generated
                  setState(() {
                    _selectedVisualType = type;
                    _visualValue = value; // path for image, ID for style
                    if (type == VisualType.randomStyle) {
                      _currentRandomStyle = randomStyle; // This is the new/selected style
                    } else {
                      _currentRandomStyle = null;
                    }
                  });
                },
              ),
              const SizedBox(height: 24.0),
              ElevatedButton(
                onPressed: _isLoading ? null : _submitForm,
                style: ElevatedButton.styleFrom(
                  padding: const EdgeInsets.symmetric(vertical: 16.0),
                  textStyle: const TextStyle(fontSize: 18),
                ),
                child: _isLoading
                    ? const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(strokeWidth: 3, color: Colors.white),
                      )
                    : const Text('Save Changes'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
